{"version":3,"file":"static/js/791.4b5d78ba.chunk.js","mappings":"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","sources":["utils/performance.ts","../node_modules/recharts/es6/chart/BarChart.js","components/admin/PerformanceDashboard.tsx"],"sourcesContent":["// Performance monitoring utilities\r\nexport class PerformanceMonitor {\r\n  private static instance: PerformanceMonitor;\r\n  private metrics: Map<string, number[]> = new Map();\r\n  private observers: PerformanceObserver[] = [];\r\n\r\n  private constructor() {\r\n    this.initObservers();\r\n  }\r\n\r\n  static getInstance(): PerformanceMonitor {\r\n    if (!PerformanceMonitor.instance) {\r\n      PerformanceMonitor.instance = new PerformanceMonitor();\r\n    }\r\n    return PerformanceMonitor.instance;\r\n  }\r\n\r\n  private initObservers() {\r\n    // Observe navigation timing\r\n    if ('PerformanceObserver' in window) {\r\n      const navigationObserver = new PerformanceObserver((list) => {\r\n        for (const entry of list.getEntries()) {\r\n          if (entry.entryType === 'navigation') {\r\n            const navEntry = entry as PerformanceNavigationTiming;\r\n            this.recordMetric('navigation', navEntry.loadEventEnd - navEntry.loadEventStart);\r\n          }\r\n        }\r\n      });\r\n      \r\n      try {\r\n        navigationObserver.observe({ entryTypes: ['navigation'] });\r\n        this.observers.push(navigationObserver);\r\n      } catch (e) {\r\n        console.warn('Navigation timing not supported');\r\n      }\r\n\r\n      // Observe paint timing\r\n      const paintObserver = new PerformanceObserver((list) => {\r\n        for (const entry of list.getEntries()) {\r\n          if (entry.entryType === 'paint') {\r\n            this.recordMetric('paint', entry.startTime);\r\n          }\r\n        }\r\n      });\r\n      \r\n      try {\r\n        paintObserver.observe({ entryTypes: ['paint'] });\r\n        this.observers.push(paintObserver);\r\n      } catch (e) {\r\n        console.warn('Paint timing not supported');\r\n      }\r\n    }\r\n  }\r\n\r\n  recordMetric(name: string, value: number) {\r\n    if (!this.metrics.has(name)) {\r\n      this.metrics.set(name, []);\r\n    }\r\n    this.metrics.get(name)!.push(value);\r\n  }\r\n\r\n  getAverageMetric(name: string): number {\r\n    const values = this.metrics.get(name);\r\n    if (!values || values.length === 0) return 0;\r\n    return values.reduce((sum, val) => sum + val, 0) / values.length;\r\n  }\r\n\r\n  getMetrics(): Record<string, number[]> {\r\n    const result: Record<string, number[]> = {};\r\n    this.metrics.forEach((values, key) => {\r\n      result[key] = [...values];\r\n    });\r\n    return result;\r\n  }\r\n\r\n  measureAsync<T>(name: string, fn: () => Promise<T>): Promise<T> {\r\n    const start = performance.now();\r\n    return fn().finally(() => {\r\n      const duration = performance.now() - start;\r\n      this.recordMetric(name, duration);\r\n    });\r\n  }\r\n\r\n  measureSync<T>(name: string, fn: () => T): T {\r\n    const start = performance.now();\r\n    try {\r\n      return fn();\r\n    } finally {\r\n      const duration = performance.now() - start;\r\n      this.recordMetric(name, duration);\r\n    }\r\n  }\r\n\r\n  reportMetrics() {\r\n    const metrics = this.getMetrics();\r\n    console.log('Performance Metrics:', metrics);\r\n    \r\n    // Send to analytics if available\r\n    if (process.env.NODE_ENV === 'production') {\r\n      // Send to analytics service\r\n      this.sendToAnalytics(metrics);\r\n    }\r\n  }\r\n\r\n  private sendToAnalytics(metrics: Record<string, number[]>) {\r\n    // Implementation for sending metrics to analytics service\r\n    // This could be Google Analytics, Firebase Analytics, etc.\r\n    try {\r\n      // Example: Send to Firebase Analytics\r\n      if (typeof window !== 'undefined' && (window as any).gtag) {\r\n        Object.entries(metrics).forEach(([name, values]) => {\r\n          const average = values.reduce((sum, val) => sum + val, 0) / values.length;\r\n          (window as any).gtag('event', 'performance_metric', {\r\n            metric_name: name,\r\n            metric_value: average,\r\n            metric_count: values.length\r\n          });\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.warn('Failed to send metrics to analytics:', e);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    this.observers.forEach(observer => observer.disconnect());\r\n    this.observers = [];\r\n    this.metrics.clear();\r\n  }\r\n}\r\n\r\n// React Hook for performance monitoring\r\nexport const usePerformanceMonitor = () => {\r\n  const monitor = PerformanceMonitor.getInstance();\r\n\r\n  const measureAsync = (name: string, fn: () => Promise<any>) => {\r\n    return monitor.measureAsync(name, fn);\r\n  };\r\n\r\n  const measureSync = (name: string, fn: () => any) => {\r\n    return monitor.measureSync(name, fn);\r\n  };\r\n\r\n  const recordMetric = (name: string, value: number) => {\r\n    monitor.recordMetric(name, value);\r\n  };\r\n\r\n  return {\r\n    measureAsync,\r\n    measureSync,\r\n    recordMetric,\r\n    getMetrics: () => monitor.getMetrics(),\r\n    reportMetrics: () => monitor.reportMetrics()\r\n  };\r\n};\r\n\r\n// Web Vitals monitoring\r\nexport const reportWebVitals = (onPerfEntry: (metric: any) => void) => {\r\n  import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n    getCLS(onPerfEntry);\r\n    getFID(onPerfEntry);\r\n    getFCP(onPerfEntry);\r\n    getLCP(onPerfEntry);\r\n    getTTFB(onPerfEntry);\r\n  });\r\n};\r\n\r\n// Memory usage monitoring\r\nexport const getMemoryUsage = () => {\r\n  if ('memory' in performance) {\r\n    const memory = (performance as any).memory;\r\n    return {\r\n      usedJSHeapSize: memory.usedJSHeapSize,\r\n      totalJSHeapSize: memory.totalJSHeapSize,\r\n      jsHeapSizeLimit: memory.jsHeapSizeLimit\r\n    };\r\n  }\r\n  return null;\r\n};\r\n\r\n// Network monitoring\r\nexport const getNetworkInfo = () => {\r\n  if ('connection' in navigator) {\r\n    const connection = (navigator as any).connection;\r\n    return {\r\n      effectiveType: connection.effectiveType,\r\n      downlink: connection.downlink,\r\n      rtt: connection.rtt\r\n    };\r\n  }\r\n  return null;\r\n}; ","/**\n * @fileOverview Bar Chart\n */\nimport { generateCategoricalChart } from './generateCategoricalChart';\nimport { Bar } from '../cartesian/Bar';\nimport { XAxis } from '../cartesian/XAxis';\nimport { YAxis } from '../cartesian/YAxis';\nimport { formatAxisMap } from '../util/CartesianUtils';\nexport var BarChart = generateCategoricalChart({\n  chartName: 'BarChart',\n  GraphicalChild: Bar,\n  defaultTooltipEventType: 'axis',\n  validateTooltipEventTypes: ['axis', 'item'],\n  axisComponents: [{\n    axisType: 'xAxis',\n    AxisComp: XAxis\n  }, {\n    axisType: 'yAxis',\n    AxisComp: YAxis\n  }],\n  formatAxisMap: formatAxisMap\n});","import React, { useState, useEffect, useMemo } from 'react';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, BarChart, Bar, PieChart, Pie, Cell } from 'recharts';\r\nimport { usePerformanceMonitor } from '../../utils/performance';\r\nimport { getMemoryUsage, getNetworkInfo } from '../../utils/performance';\r\nimport { useABTest } from '../../utils/abTesting';\r\nimport './PerformanceDashboard.css';\r\n\r\ninterface PerformanceData {\r\n  timestamp: number;\r\n  memoryUsage: number;\r\n  networkSpeed: number;\r\n  loadTime: number;\r\n  cacheHitRate: number;\r\n}\r\n\r\nconst PerformanceDashboard: React.FC = () => {\r\n  const { getMetrics, reportMetrics } = usePerformanceMonitor();\r\n  const [performanceData, setPerformanceData] = useState<PerformanceData[]>([]);\r\n  const [isMonitoring, setIsMonitoring] = useState(false);\r\n  const [refreshInterval, setRefreshInterval] = useState<NodeJS.Timeout | null>(null);\r\n\r\n  // AB Test results\r\n  const { variant: uiVariant, config: uiConfig } = useABTest('quiz_ui_variant');\r\n  const { variant: loadingVariant, config: loadingConfig } = useABTest('question_loading');\r\n\r\n  // Start/Stop monitoring\r\n  const toggleMonitoring = () => {\r\n    if (isMonitoring) {\r\n      if (refreshInterval) {\r\n        clearInterval(refreshInterval);\r\n        setRefreshInterval(null);\r\n      }\r\n      setIsMonitoring(false);\r\n    } else {\r\n      const interval = setInterval(() => {\r\n        collectPerformanceData();\r\n      }, 5000); // Collect data every 5 seconds\r\n      setRefreshInterval(interval);\r\n      setIsMonitoring(true);\r\n    }\r\n  };\r\n\r\n  const collectPerformanceData = () => {\r\n    const memory = getMemoryUsage();\r\n    const network = getNetworkInfo();\r\n    const metrics = getMetrics();\r\n\r\n    const data: PerformanceData = {\r\n      timestamp: Date.now(),\r\n      memoryUsage: memory ? (memory.usedJSHeapSize / memory.jsHeapSizeLimit) * 100 : 0,\r\n      networkSpeed: network ? network.downlink : 0,\r\n      loadTime: metrics['fetchQuestions'] ? metrics['fetchQuestions'].reduce((a, b) => a + b, 0) / metrics['fetchQuestions'].length : 0,\r\n      cacheHitRate: metrics['cache_hit'] ? (metrics['cache_hit'].length / (metrics['cache_hit'].length + (metrics['fetch_error']?.length || 0))) * 100 : 0\r\n    };\r\n\r\n    setPerformanceData(prev => [...prev.slice(-20), data]); // Keep last 20 data points\r\n  };\r\n\r\n  // Memoized chart data\r\n  const chartData = useMemo(() => {\r\n    return performanceData.map(data => ({\r\n      time: new Date(data.timestamp).toLocaleTimeString(),\r\n      memory: data.memoryUsage,\r\n      network: data.networkSpeed,\r\n      loadTime: data.loadTime,\r\n      cacheHitRate: data.cacheHitRate\r\n    }));\r\n  }, [performanceData]);\r\n\r\n  // Performance summary\r\n  const performanceSummary = useMemo(() => {\r\n    if (performanceData.length === 0) return null;\r\n\r\n    const latest = performanceData[performanceData.length - 1];\r\n    const avgMemory = performanceData.reduce((sum, data) => sum + data.memoryUsage, 0) / performanceData.length;\r\n    const avgLoadTime = performanceData.reduce((sum, data) => sum + data.loadTime, 0) / performanceData.length;\r\n    const avgCacheHitRate = performanceData.reduce((sum, data) => sum + data.cacheHitRate, 0) / performanceData.length;\r\n\r\n    return {\r\n      currentMemory: latest.memoryUsage,\r\n      averageMemory: avgMemory,\r\n      currentLoadTime: latest.loadTime,\r\n      averageLoadTime: avgLoadTime,\r\n      currentCacheHitRate: latest.cacheHitRate,\r\n      averageCacheHitRate: avgCacheHitRate,\r\n      dataPoints: performanceData.length\r\n    };\r\n  }, [performanceData]);\r\n\r\n  // Cleanup on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (refreshInterval) {\r\n        clearInterval(refreshInterval);\r\n      }\r\n    };\r\n  }, [refreshInterval]);\r\n\r\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\r\n\r\n  return (\r\n    <div className=\"performance-dashboard\">\r\n      <div className=\"dashboard-header\">\r\n        <h1>Performance Dashboard</h1>\r\n        <button \r\n          onClick={toggleMonitoring}\r\n          className={`monitoring-btn ${isMonitoring ? 'active' : ''}`}\r\n        >\r\n          {isMonitoring ? 'Stop Monitoring' : 'Start Monitoring'}\r\n        </button>\r\n      </div>\r\n\r\n      {/* AB Test Information */}\r\n      <div className=\"ab-test-section\">\r\n        <h2>AB Test Status</h2>\r\n        <div className=\"ab-test-grid\">\r\n          <div className=\"ab-test-card\">\r\n            <h3>UI Variant</h3>\r\n            <p>Current: {uiVariant}</p>\r\n            <p>Progress Bar: {uiConfig.showProgressBar ? 'Yes' : 'No'}</p>\r\n            <p>Animation Speed: {uiConfig.animationSpeed}</p>\r\n          </div>\r\n          <div className=\"ab-test-card\">\r\n            <h3>Loading Variant</h3>\r\n            <p>Current: {loadingVariant}</p>\r\n            <p>Cache Size: {loadingConfig.cacheSize}</p>\r\n            <p>Strategy: {loadingConfig.loadingStrategy}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Performance Summary */}\r\n      {performanceSummary && (\r\n        <div className=\"performance-summary\">\r\n          <h2>Performance Summary</h2>\r\n          <div className=\"summary-grid\">\r\n            <div className=\"summary-card\">\r\n              <h3>Memory Usage</h3>\r\n              <p className=\"current\">{performanceSummary.currentMemory.toFixed(2)}%</p>\r\n              <p className=\"average\">Avg: {performanceSummary.averageMemory.toFixed(2)}%</p>\r\n            </div>\r\n            <div className=\"summary-card\">\r\n              <h3>Load Time</h3>\r\n              <p className=\"current\">{performanceSummary.currentLoadTime.toFixed(2)}ms</p>\r\n              <p className=\"average\">Avg: {performanceSummary.averageLoadTime.toFixed(2)}ms</p>\r\n            </div>\r\n            <div className=\"summary-card\">\r\n              <h3>Cache Hit Rate</h3>\r\n              <p className=\"current\">{performanceSummary.currentCacheHitRate.toFixed(2)}%</p>\r\n              <p className=\"average\">Avg: {performanceSummary.averageCacheHitRate.toFixed(2)}%</p>\r\n            </div>\r\n            <div className=\"summary-card\">\r\n              <h3>Data Points</h3>\r\n              <p className=\"current\">{performanceSummary.dataPoints}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Charts */}\r\n      {chartData.length > 0 && (\r\n        <div className=\"charts-section\">\r\n          <h2>Performance Charts</h2>\r\n          \r\n          <div className=\"chart-grid\">\r\n            <div className=\"chart-container\">\r\n              <h3>Memory Usage Over Time</h3>\r\n              <ResponsiveContainer width=\"100%\" height={300}>\r\n                <LineChart data={chartData}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n                  <XAxis dataKey=\"time\" />\r\n                  <YAxis />\r\n                  <Tooltip />\r\n                  <Line type=\"monotone\" dataKey=\"memory\" stroke=\"#8884d8\" />\r\n                </LineChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n\r\n            <div className=\"chart-container\">\r\n              <h3>Load Time Over Time</h3>\r\n              <ResponsiveContainer width=\"100%\" height={300}>\r\n                <LineChart data={chartData}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n                  <XAxis dataKey=\"time\" />\r\n                  <YAxis />\r\n                  <Tooltip />\r\n                  <Line type=\"monotone\" dataKey=\"loadTime\" stroke=\"#82ca9d\" />\r\n                </LineChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n\r\n            <div className=\"chart-container\">\r\n              <h3>Cache Hit Rate</h3>\r\n              <ResponsiveContainer width=\"100%\" height={300}>\r\n                <BarChart data={chartData}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n                  <XAxis dataKey=\"time\" />\r\n                  <YAxis />\r\n                  <Tooltip />\r\n                  <Bar dataKey=\"cacheHitRate\" fill=\"#8884d8\" />\r\n                </BarChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n\r\n            <div className=\"chart-container\">\r\n              <h3>Network Speed</h3>\r\n              <ResponsiveContainer width=\"100%\" height={300}>\r\n                <LineChart data={chartData}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n                  <XAxis dataKey=\"time\" />\r\n                  <YAxis />\r\n                  <Tooltip />\r\n                  <Line type=\"monotone\" dataKey=\"network\" stroke=\"#ffc658\" />\r\n                </LineChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Export Data */}\r\n      <div className=\"export-section\">\r\n        <h2>Export Data</h2>\r\n        <button onClick={() => reportMetrics()}>\r\n          Export Metrics\r\n        </button>\r\n        <button onClick={() => {\r\n          const dataStr = JSON.stringify(performanceData, null, 2);\r\n          const dataBlob = new Blob([dataStr], { type: 'application/json' });\r\n          const url = URL.createObjectURL(dataBlob);\r\n          const link = document.createElement('a');\r\n          link.href = url;\r\n          link.download = 'performance-data.json';\r\n          link.click();\r\n        }}>\r\n          Export Performance Data\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PerformanceDashboard; "],"names":["PerformanceMonitor","constructor","metrics","Map","observers","this","initObservers","getInstance","instance","window","navigationObserver","PerformanceObserver","list","entry","getEntries","entryType","navEntry","recordMetric","loadEventEnd","loadEventStart","observe","entryTypes","push","e","console","warn","paintObserver","startTime","name","value","has","set","get","getAverageMetric","values","length","reduce","sum","val","getMetrics","result","forEach","key","measureAsync","fn","start","performance","now","finally","duration","measureSync","reportMetrics","log","sendToAnalytics","gtag","Object","entries","_ref","average","metric_name","metric_value","metric_count","destroy","observer","disconnect","clear","usePerformanceMonitor","monitor","getMemoryUsage","memory","usedJSHeapSize","totalJSHeapSize","jsHeapSizeLimit","getNetworkInfo","navigator","connection","effectiveType","downlink","rtt","BarChart","generateCategoricalChart","chartName","GraphicalChild","Bar","defaultTooltipEventType","validateTooltipEventTypes","axisComponents","axisType","AxisComp","XAxis","YAxis","formatAxisMap","PerformanceDashboard","performanceData","setPerformanceData","useState","isMonitoring","setIsMonitoring","refreshInterval","setRefreshInterval","variant","uiVariant","config","uiConfig","useABTest","loadingVariant","loadingConfig","collectPerformanceData","_metrics$fetch_error","network","data","timestamp","Date","memoryUsage","networkSpeed","loadTime","a","b","cacheHitRate","prev","slice","chartData","useMemo","map","time","toLocaleTimeString","performanceSummary","latest","avgMemory","avgLoadTime","avgCacheHitRate","currentMemory","averageMemory","currentLoadTime","averageLoadTime","currentCacheHitRate","averageCacheHitRate","dataPoints","useEffect","clearInterval","_jsxs","className","children","_jsx","onClick","toggleMonitoring","interval","setInterval","concat","showProgressBar","animationSpeed","cacheSize","loadingStrategy","toFixed","ResponsiveContainer","width","height","LineChart","CartesianGrid","strokeDasharray","dataKey","Tooltip","Line","type","stroke","fill","dataStr","JSON","stringify","dataBlob","Blob","url","URL","createObjectURL","link","document","createElement","href","download","click"],"sourceRoot":""}
{"version":3,"file":"static/js/906.8772c13e.chunk.js","mappings":"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","sources":["../node_modules/recharts/es6/chart/BarChart.js","components/features/admin/PerformanceDashboard.tsx"],"sourcesContent":["/**\n * @fileOverview Bar Chart\n */\nimport { generateCategoricalChart } from './generateCategoricalChart';\nimport { Bar } from '../cartesian/Bar';\nimport { XAxis } from '../cartesian/XAxis';\nimport { YAxis } from '../cartesian/YAxis';\nimport { formatAxisMap } from '../util/CartesianUtils';\nexport var BarChart = generateCategoricalChart({\n  chartName: 'BarChart',\n  GraphicalChild: Bar,\n  defaultTooltipEventType: 'axis',\n  validateTooltipEventTypes: ['axis', 'item'],\n  axisComponents: [{\n    axisType: 'xAxis',\n    AxisComp: XAxis\n  }, {\n    axisType: 'yAxis',\n    AxisComp: YAxis\n  }],\n  formatAxisMap: formatAxisMap\n});","import React, { useState, useEffect, useMemo } from 'react';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, BarChart, Bar } from 'recharts';\r\nimport { usePerformanceMonitor } from '../../../utils/performance';\r\nimport { getMemoryUsage, getNetworkInfo } from '../../../utils/performance';\r\nimport { useABTest } from '../../../utils/abTesting';\r\nimport './PerformanceDashboard.css';\r\n\r\ninterface PerformanceData {\r\n  timestamp: number;\r\n  memoryUsage: number;\r\n  networkSpeed: number;\r\n  loadTime: number;\r\n  cacheHitRate: number;\r\n}\r\n\r\nconst PerformanceDashboard: React.FC = () => {\r\n  const { getMetrics, reportMetrics } = usePerformanceMonitor();\r\n  const [performanceData, setPerformanceData] = useState<PerformanceData[]>([]);\r\n  const [isMonitoring, setIsMonitoring] = useState(false);\r\n  const [refreshInterval, setRefreshInterval] = useState<NodeJS.Timeout | null>(null);\r\n\r\n  // AB Test results\r\n  const { variant: uiVariant, config: uiConfig } = useABTest('quiz_ui_variant');\r\n  const { variant: loadingVariant, config: loadingConfig } = useABTest('question_loading');\r\n\r\n  // Start/Stop monitoring\r\n  const toggleMonitoring = () => {\r\n    if (isMonitoring) {\r\n      if (refreshInterval) {\r\n        clearInterval(refreshInterval);\r\n        setRefreshInterval(null);\r\n      }\r\n      setIsMonitoring(false);\r\n    } else {\r\n      const interval = setInterval(() => {\r\n        collectPerformanceData();\r\n      }, 5000); // Collect data every 5 seconds\r\n      setRefreshInterval(interval);\r\n      setIsMonitoring(true);\r\n    }\r\n  };\r\n\r\n  const collectPerformanceData = () => {\r\n    const memory = getMemoryUsage();\r\n    const network = getNetworkInfo();\r\n    const metrics = getMetrics();\r\n\r\n    const data: PerformanceData = {\r\n      timestamp: Date.now(),\r\n      memoryUsage: memory ? (memory.usedJSHeapSize / memory.jsHeapSizeLimit) * 100 : 0,\r\n      networkSpeed: network ? network.downlink : 0,\r\n      loadTime: metrics['fetchQuestions'] ? metrics['fetchQuestions'].reduce((a, b) => a + b, 0) / metrics['fetchQuestions'].length : 0,\r\n      cacheHitRate: metrics['cache_hit'] ? (metrics['cache_hit'].length / (metrics['cache_hit'].length + (metrics['fetch_error']?.length || 0))) * 100 : 0\r\n    };\r\n\r\n    setPerformanceData(prev => [...prev.slice(-20), data]); // Keep last 20 data points\r\n  };\r\n\r\n  // Memoized chart data\r\n  const chartData = useMemo(() => {\r\n    return performanceData.map(data => ({\r\n      time: new Date(data.timestamp).toLocaleTimeString(),\r\n      memory: data.memoryUsage,\r\n      network: data.networkSpeed,\r\n      loadTime: data.loadTime,\r\n      cacheHitRate: data.cacheHitRate\r\n    }));\r\n  }, [performanceData]);\r\n\r\n  // Performance summary\r\n  const performanceSummary = useMemo(() => {\r\n    if (performanceData.length === 0) return null;\r\n\r\n    const latest = performanceData[performanceData.length - 1];\r\n    const avgMemory = performanceData.reduce((sum, data) => sum + data.memoryUsage, 0) / performanceData.length;\r\n    const avgLoadTime = performanceData.reduce((sum, data) => sum + data.loadTime, 0) / performanceData.length;\r\n    const avgCacheHitRate = performanceData.reduce((sum, data) => sum + data.cacheHitRate, 0) / performanceData.length;\r\n\r\n    return {\r\n      currentMemory: latest?.memoryUsage || 0,\r\n      averageMemory: avgMemory,\r\n      currentLoadTime: latest?.loadTime || 0,\r\n      averageLoadTime: avgLoadTime,\r\n      currentCacheHitRate: latest?.cacheHitRate || 0,\r\n      averageCacheHitRate: avgCacheHitRate,\r\n      dataPoints: performanceData.length\r\n    };\r\n  }, [performanceData]);\r\n\r\n  // Cleanup on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (refreshInterval) {\r\n        clearInterval(refreshInterval);\r\n      }\r\n    };\r\n  }, [refreshInterval]);\r\n\r\n  // const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\r\n\r\n  return (\r\n    <div className=\"performance-dashboard\">\r\n      <div className=\"dashboard-header\">\r\n        <h1>Performance Dashboard</h1>\r\n        <button \r\n          onClick={toggleMonitoring}\r\n          className={`monitoring-btn ${isMonitoring ? 'active' : ''}`}\r\n        >\r\n          {isMonitoring ? 'Stop Monitoring' : 'Start Monitoring'}\r\n        </button>\r\n      </div>\r\n\r\n      {/* AB Test Information */}\r\n      <div className=\"ab-test-section\">\r\n        <h2>AB Test Status</h2>\r\n        <div className=\"ab-test-grid\">\r\n          <div className=\"ab-test-card\">\r\n            <h3>UI Variant</h3>\r\n            <p>Current: {uiVariant}</p>\r\n            <p>Progress Bar: {uiConfig.showProgressBar ? 'Yes' : 'No'}</p>\r\n            <p>Animation Speed: {uiConfig.animationSpeed}</p>\r\n          </div>\r\n          <div className=\"ab-test-card\">\r\n            <h3>Loading Variant</h3>\r\n            <p>Current: {loadingVariant}</p>\r\n            <p>Cache Size: {loadingConfig.cacheSize}</p>\r\n            <p>Strategy: {loadingConfig.loadingStrategy}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Performance Summary */}\r\n      {performanceSummary && (\r\n        <div className=\"performance-summary\">\r\n          <h2>Performance Summary</h2>\r\n          <div className=\"summary-grid\">\r\n            <div className=\"summary-card\">\r\n              <h3>Memory Usage</h3>\r\n              <p className=\"current\">{performanceSummary.currentMemory.toFixed(2)}%</p>\r\n              <p className=\"average\">Avg: {performanceSummary.averageMemory.toFixed(2)}%</p>\r\n            </div>\r\n            <div className=\"summary-card\">\r\n              <h3>Load Time</h3>\r\n              <p className=\"current\">{performanceSummary.currentLoadTime.toFixed(2)}ms</p>\r\n              <p className=\"average\">Avg: {performanceSummary.averageLoadTime.toFixed(2)}ms</p>\r\n            </div>\r\n            <div className=\"summary-card\">\r\n              <h3>Cache Hit Rate</h3>\r\n              <p className=\"current\">{performanceSummary.currentCacheHitRate.toFixed(2)}%</p>\r\n              <p className=\"average\">Avg: {performanceSummary.averageCacheHitRate.toFixed(2)}%</p>\r\n            </div>\r\n            <div className=\"summary-card\">\r\n              <h3>Data Points</h3>\r\n              <p className=\"current\">{performanceSummary.dataPoints}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Charts */}\r\n      {chartData.length > 0 && (\r\n        <div className=\"charts-section\">\r\n          <h2>Performance Charts</h2>\r\n          \r\n          <div className=\"chart-grid\">\r\n            <div className=\"chart-container\">\r\n              <h3>Memory Usage Over Time</h3>\r\n              <ResponsiveContainer width=\"100%\" height={300}>\r\n                <LineChart data={chartData}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n                  <XAxis dataKey=\"time\" />\r\n                  <YAxis />\r\n                  <Tooltip />\r\n                  <Line type=\"monotone\" dataKey=\"memory\" stroke=\"#8884d8\" />\r\n                </LineChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n\r\n            <div className=\"chart-container\">\r\n              <h3>Load Time Over Time</h3>\r\n              <ResponsiveContainer width=\"100%\" height={300}>\r\n                <LineChart data={chartData}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n                  <XAxis dataKey=\"time\" />\r\n                  <YAxis />\r\n                  <Tooltip />\r\n                  <Line type=\"monotone\" dataKey=\"loadTime\" stroke=\"#82ca9d\" />\r\n                </LineChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n\r\n            <div className=\"chart-container\">\r\n              <h3>Cache Hit Rate</h3>\r\n              <ResponsiveContainer width=\"100%\" height={300}>\r\n                <BarChart data={chartData}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n                  <XAxis dataKey=\"time\" />\r\n                  <YAxis />\r\n                  <Tooltip />\r\n                  <Bar dataKey=\"cacheHitRate\" fill=\"#8884d8\" />\r\n                </BarChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n\r\n            <div className=\"chart-container\">\r\n              <h3>Network Speed</h3>\r\n              <ResponsiveContainer width=\"100%\" height={300}>\r\n                <LineChart data={chartData}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n                  <XAxis dataKey=\"time\" />\r\n                  <YAxis />\r\n                  <Tooltip />\r\n                  <Line type=\"monotone\" dataKey=\"network\" stroke=\"#ffc658\" />\r\n                </LineChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Export Data */}\r\n      <div className=\"export-section\">\r\n        <h2>Export Data</h2>\r\n        <button onClick={() => reportMetrics()}>\r\n          Export Metrics\r\n        </button>\r\n        <button onClick={() => {\r\n          const dataStr = JSON.stringify(performanceData, null, 2);\r\n          const dataBlob = new Blob([dataStr], { type: 'application/json' });\r\n          const url = URL.createObjectURL(dataBlob);\r\n          const link = document.createElement('a');\r\n          link.href = url;\r\n          link.download = 'performance-data.json';\r\n          link.click();\r\n        }}>\r\n          Export Performance Data\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PerformanceDashboard; "],"names":["BarChart","generateCategoricalChart","chartName","GraphicalChild","Bar","defaultTooltipEventType","validateTooltipEventTypes","axisComponents","axisType","AxisComp","XAxis","YAxis","formatAxisMap","PerformanceDashboard","getMetrics","reportMetrics","usePerformanceMonitor","performanceData","setPerformanceData","useState","isMonitoring","setIsMonitoring","refreshInterval","setRefreshInterval","variant","uiVariant","config","uiConfig","useABTest","loadingVariant","loadingConfig","collectPerformanceData","_metrics$fetch_error","memory","getMemoryUsage","network","getNetworkInfo","metrics","data","timestamp","Date","now","memoryUsage","usedJSHeapSize","jsHeapSizeLimit","networkSpeed","downlink","loadTime","reduce","a","b","length","cacheHitRate","prev","slice","chartData","useMemo","map","time","toLocaleTimeString","performanceSummary","latest","avgMemory","sum","avgLoadTime","avgCacheHitRate","currentMemory","averageMemory","currentLoadTime","averageLoadTime","currentCacheHitRate","averageCacheHitRate","dataPoints","useEffect","clearInterval","_jsxs","className","children","_jsx","onClick","toggleMonitoring","interval","setInterval","showProgressBar","animationSpeed","cacheSize","loadingStrategy","toFixed","ResponsiveContainer","width","height","LineChart","CartesianGrid","strokeDasharray","dataKey","Tooltip","Line","type","stroke","fill","dataStr","JSON","stringify","dataBlob","Blob","url","URL","createObjectURL","link","document","createElement","href","download","click"],"sourceRoot":""}